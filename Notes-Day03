Parametrized Build pipeline:
====================================
Create a new Job --> select template as pipleinbe and add the below code

pipeline{
    
    tools{
        maven 'mymaven'
    }
    
   agent any
   
   parameters{
       
       choice(name: "ENV",choices: ["","Dev","QA"])
       
   }
    
    stages{
        
        stage('Build in Dev Env')
        {
            when { expression {params.ENV == "Dev"} }
            steps{
                  git 'https://github.com/Sonal0409/DevOpsCodeDemo.git'
                  sh 'mvn pmd:pmd'
                  sh 'mvn package'
            }
        }
        
         stage('Build in Test Env')
        {
            when { expression {params.ENV == "QA"} }
            steps{
                  git 'https://github.com/Sonal0409/DevOpsCodeDemo.git'
                  sh 'mvn Test'
                  sh 'mvn package'
            }
        }

        
        
        
    }
    
    
    
}






=============================================
SHared Libraries Demo
===========================================


@Library('my-shared-library') _
pipeline{
    
    tools{
        maven 'mymaven'
    }
    
    agent any
    
    stages{
        
        stage('Checkout Code'){
            steps{
                
                cloneRepo('https://github.com/Sonal0409/DevOpsCodeDemo.git')
            }
        }
        
        stage('Build Code'){
            
            steps{
                build('Compile')
            }
        }
        
        stage('check Log')
    {
      steps{
          filterLogs('WARNING', 2)
      }
        
    }
        
      
        
    }
    
}

============================================================
JenkinsFile
================================================================



*************************
Jenkins Server Backup and Restore steps:
==============================================================

Create a new server and install jenkins on it

Create some jobs on the jenkins server

Create an S3 bucket on AWS to store the back up of jenkins directory

TO allow AWS ec2 server to write into AWS s3 bucket we need to

> Create a IAM role for amazons3fullaccess for EC2

> Attach the role to jenkins Ec2 server-->actions-->security-->IAM role



Now stop jenkins server from terminal
====================================
# systemctl stop jenkins

# tar -zcvf jenkins-backup.tar.gz /var/lib/jenkins

# ls

# aws s3 cp jenkins-backup.tar.gz s3://jenkins-backup-demo/jenkins-backup.tar.gz

Check the s3 bucket-> it will have the back up

Now create a new instance and add the below script in user data. This will install and start jenkins. It will take few mins

#!/bin/bash

sudo yum update -y
sudo yum install git -y
sudo amazon-linux-extras install java-openjdk11 -y
sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo
sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io-2023.key
sudo yum install jenkins -y

sudo systemctl start jenkins
sudo systemctl enable jenkins

Once you are able to access jenkins on browser, go to the terminal now:

# systemctl stop jenkins

# aws s3 cp s3://jenkins-backup-demo/jenkins-backup.tar.gz jenkins-backup.tar.gz

# ls

# rm -rf /var/lib/jenkins

# tar -zxvf jenkins-backup.tar.gz -C /

# systemctl start jenkins



























