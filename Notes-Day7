
Kubernetes Service: ClusterIP
==========================================

Create an Application POD

vim pod-nginx.yml

apiVersion: v1
kind: Pod
metadata:
 name: pod1
 labels:
  author: sonal
  type: webserver
spec:
 containers:
  - name: c1
    image: nginx


# kubectl create -f pod-nginx.yml



Create a service of type ClusterIP


vim service1.yml


apiVersion: v1
kind: Service
metadata: 
 name: mysvc1
spec:
 type: ClusterIP
 selector:
  type: webserver
 ports:
 - targetPort: 80
   port: 80


# kubectl create -f service1.yml

# kubectl get service

# kubectl get endpoints


Create a test pod- to send request to service


vim tetspod.yml

apiVersion: v1
kind: Pod
metadata:
 name: testpod
 labels:
  role: dev
spec:
 containers:
  - name: c1
    image: ubuntu
    args: [/bin/bash, -c, 'sleep 6000']


# kubectl create -f testpod.yml

# kubectl get pods -o wide

# kubectl exec -it testpod -- bash

# apt-get update

# apt-get install curl -y

# curl mysvc1

give exit to comeout of the container

=============================================================

Service of type : NodePort
============================================================

vim service2.yml

apiVersion: v1
kind: Service
metadata:
 name: mysvc2
spec:
 type: NodePort
 ports:
  - targetPort: 80
    port: 80
 selector:
  type: webserver

# kubectl create -f service2.yml

# kubectl get svc

copy the 5 digit node port number

go to the browser and give localhost:portnumber

=================================================
Service of type Load Balancer:
===================================================

apiVersion: v1
kind: Service
metadata:
 name: mysvc
spec:
 type: LoadBalancer
 ports:
  - targetPort: 80
    port: 80
 selector:
  type: webserver

======================================================================================
Deployment Object In kubernetes:
======================================================================================
vim deployment.yml


kind: Deployment
apiVersion: apps/v1
metadata:
  name: kubeserve
spec:
  replicas: 3
  minReadySeconds: 10 # wait for 45 sec before going to deploy next pod
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1  
      maxSurge: 1        # max number of pods to run for the deployment
  selector:
    matchLabels:
      app: kubeserve
  template:
    metadata:
      name: kubeserve
      labels:
        app: kubeserve
    spec:
      containers:
       - name: app
         image: leaddevops/kubeserve:v1


# kubectl create -f deployment.yml

# kubectl get deployment

# kubectl get pods

# kubectl scale deployment kubeserve --replicas=5

# kubectl get pods
# kubectl scale deployment kubeserve --replicas=2

 # kubectl get deployment -o wide

Change the Image

# kubectl set image deployment kubeserve app=leaddevops/kubeserve:v2

# kubectl rollout status

# kubectl rollout undo deployment kubeserve

# kubectl get deployment -o wide



























