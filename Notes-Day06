Create Docker Images 
================================================

1. We can commit a container into an Image 

# docker run -it --name cont01 ubuntu

In the container execute below commands:

    > apt-get update 
    > apt-get install curl -y

Come out of container  (CTL pq)

# docker commit cont01 image01


2. Push your custom image to docker Registry 

      > We have to change the name of the Image, so that it can be pushed to our repository on docker hub 
        # docker tag image01 sonal04/image01

      # docker login 
      give dockerhub login
          dockerhub password
          
      # docker push sonal04/image01


==================================================================

Creating an Image from Dockerfile
=================================================

A dockerfile consist of following keywords

1. FROM -> 
Dockerfile starts with FROM keyword 
Dockerfile will consist of only 1 FROM keyword
FROM keyword defines the name of the Base Image
Most of custom images are always based upon Docker Base Image 

2. RUN -> 
With this keyword we can run linux commands to install, upgrade or delete packages 
Any linux command to be executed on the container, we can give with this keyword 
We can have run keyword many time in the dockerfile 

3. ENV -> We can provide environment variables that can be used in the dockerfile 

4. LABEL  -> Give maintainer information about the Dockerfile

5.COPY  ->
This keyword is used to copy a file from docker host machine to the containers directory 
It cannot copy tar files

6. ADD ->
This keyword is used to copy a file from docker host machine to the containers directory 
It can also copy tar files

7. EXPOSE -> Expose the container to a port number 

9.CMD
with this keyword we will give commands like to start an application or run a script
This command coming from the image on the container can be replaced by a new command that is passed by the user at runtime

10.ENTRYPOINT
with this keyword we will give commands like to start an application or run a script

11. WORKDIR
TO create a directory in which the commands will be executed

12. VOLUME : to attach default storage to container

=============================
FROM DOCUMENTATION:
=============================

Instruction	Description
ADD	Add local or remote files and directories.
ARG	Use build-time variables.
CMD	Specify default commands.
COPY	Copy files and directories.
ENTRYPOINT	Specify default executable.
ENV	Set environment variables.
EXPOSE	Describe which ports your application is listening on.
FROM	Create a new build stage from a base image.
HEALTHCHECK	Check a container's health on startup.
LABEL	Add metadata to an image.
MAINTAINER	Specify the author of an image.
ONBUILD	Specify instructions for when the image is used in a build.
RUN	Execute build commands.
SHELL	Set the default shell of an image.
STOPSIGNAL	Specify the system call signal for exiting a container.
USER	Set user and group ID.
VOLUME	Create volume mounts.
WORKDIR	Change working directory.













========================================

# mkdir mydockerfiles
# cd mydockerfiles
# vim index.html

This file is form Docker 

save the file 



# vim dockerfile 

# this is nginx deployment

FROM ubuntu
RUN apt-get update
ENV pkg_name nginx
RUN apt-get install $pkg_name -y
COPY index.html /var/www/html
EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]


Save it

Build docker file:

# docker build -t mynginximage .

=======================================================
https://github.com/Sonal0409/nodejsappDockerfile.git

git clone https://github.com/Sonal0409/nodejsappDockerfile.git

cd nodejsappDockerfile

docker build -t nodeimage .

docker run -d -P nodeimage

========================================================
Jenkins + Docker Pipeline
=========================================================

Before we run the pipeline, run the below command on the terminal:
#  chmod 777 /var/run/docker.sock

Create a job in jenkins of type pipeline


pipeline{
    
    agent any
    
    tools{
        maven 'mymaven'
    }
    
    stages{
        
        stage('Checkout code'){
            steps{
                git 'https://github.com/Sonal0409/DevOpsCodeDemo.git'
            }
        }
        
        stage('Build Code'){
            steps{
                
                sh 'mvn package'
            }
        }
        
        stage('Build Image'){
            steps{
                sh 'cp /var/lib/jenkins/workspace/CICDPipeline/target/addressbook.war .'
                sh 'docker build -t tomcatimage:$BUILD_NUMBER .'
            }
        }
        
        stage('Deploy to Container'){
            steps{
                sh 'docker run -d -P tomcatimage:$BUILD_NUMBER'
            }
        }
    }
    
    
}

Check the containers:
===========================

# docker images

# docker ps --latest

Go to browser and give

localhost:portnumber/addressbook

===========================================================

Installation of Kubernetes on the Lab:
===================================================
Step 1:

### INSTALL/Upgrade DOCKER 

# sudo su -
# sudo apt-get update
# sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common

curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
sudo apt-get update ; clear
sudo apt-get install -y docker-ce

sudo vi /etc/docker/daemon.json

Press i and insert below content

{
	"exec-opts": ["native.cgroupdriver=systemd"]
}

Save the file. (:wq!)

sudo service docker restart



Step 2: 

### INSTALL KUBEADM,KUBELET,KUBECTL


echo "deb http://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list
curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
sudo apt-get update ; clear
sudo apt-get install -y kubelet kubeadm kubectl	

Step3: 

##### Initiate Kube cluster

sudo kubeadm init --ignore-preflight-errors=all

Step 4:

#### Setup the environment Variables

  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config


Step 5:
## set up the  Calico network

sudo kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/v3.24.1/manifests/calico.yaml


Step 6:

#### check if Kube Master is ready or not

# kubectl get nodes

REMOVE THE TAINT ON THE NODE:
======================================

# kubectl taint node ip-172-31-25-55  node-role.kubernetes.io/master:NoSchedule-


cREATE pODS IN KUBERNETES:
==================================

mkdir mykubefiles
cd mykubefiles

vim pod-definition.yml

apiVersion: v1
kind: Pod
metadata:
 name: pod1
 labels:
  author: sonal
  app: java
spec:   
 containers:
  - name: c1
    image: nginx


Save the file

# kubectl create -f pod-definition.yml

# kubectl get pods

# kubectl get pods --show-labels

==============================================================

Create a new YAML file:

# vim multi-containerpod2.yml

kind: Pod  # kubectl api-resources
apiVersion: v1
metadata:
  name: multi-cont-pod2
  namespace: default
  labels:  # are mandatory # helps to indentify a group of pods in cluster # in kube if you do not provide a label kube will assing one automatically
    role: dev  # here both key & value are your choice
spec:
  #restrtPolicy: Always # Never
  containers:
    - name: cont1
      image: httpd
    - name: cont2
      image: tomcat
    - name: ucont
      image: ubuntu
      command: ["bash", "-c", "sleep 6000"]


# kubectl create -f multi-containerpod2.yml










